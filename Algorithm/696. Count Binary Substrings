def countBinarySubstrings(self, s: str) -> int:
    def count(left, right):
        count = 0
        while left>=0 and right < len(s):
            if s[left] != s[right]:
                if count == 0 or s[left] == s[left+1]:
                    count += 1
                    left -= 1
                    right += 1
                else:
                    return count
            else:
                return count
        return count
    
    total = 0
    for i in range(len(s)):
        total += count(i, i+1)
    return total

# Another answer:
def countBinarySubstrings(self, s: str) -> int:
    cur = s[0]
    group = []
    period = 0
    for i in range(len(s)):
        if s[i] == cur:
            period += 1
        else:
            cur = s[i]
            group.append(period)
            period = 1
    group.append(period)
    
    total = 0
    for i in range(len(group)-1):
        total += min(group[i], group[i+1])
    return total

# Another answer:
def countBinarySubstrings(self, s: str) -> int:
    if len(s)<2:
        return 0
    
    last_period = 0
    period = 1
    total = 0
    
    for i in range(1, len(s)):
        if s[i] == s[i-1]:
            period += 1
        else:
            total += min(last_period, period)
            last_period, period = period, 1
    total += min(last_period, period)
    return total
