class Solution:
    def trap(self, height: List[int]) -> int:
        
        def hasConcave(height):
            if len(height)<=2:
                return False
            hasDown = False
            for i in range(1,len(height)):
                if hasDown == True and height[i - 1] < height[i]:
                    return True
                if height[i - 1] > height[i]:
                    hasDown = True
            return False
        
        def top2hight(height):
            if len(height)<=2:
                return []
            if height[0]>height[1]:
                ans = [0, 1]
            else:
                ans = [1, 0]
            for i in range(2, len(height)):
                if height[i]>height[ans[0]]:
                    ans = [i, ans[0]]
                elif height[i]>height[ans[1]]:
                    ans = [ans[0], i]
            return ans
        
        def watersum(height):
            s = 0
            thre = min(height[0], height[-1])
            for i in height:
                if i<thre:
                    s += thre - i
            return s
        
        if hasConcave(height) == False:
            return 0
        
        top2 = top2hight(height)
        if top2 == []:
            return 0
        
        top2.sort()
        left = height[:top2[0]+1]
        mid = height[top2[0]:top2[1]+1]
        right = height[top2[1]:]
        #print(left, mid, right)
        return self.trap(left) + watersum(mid) + self.trap(right)
        


# Two pointers:

class Solution:
    def trap(self, height: List[int]) -> int:
        if len(height)<=2:
            return 0
        left = 0
        right = len(height) - 1
        left_max = height[left]
        right_max = height[right]
        
        total = 0
        while left < right:
            if left_max <= right_max:
                total += left_max - height[left]
                left += 1
                left_max = max(left_max, height[left])
            else:
                total += right_max - height[right]
                right -= 1
                right_max = max(right_max, height[right])
        return total
